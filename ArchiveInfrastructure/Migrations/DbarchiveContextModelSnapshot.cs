// <auto-generated />
using System;
using ArchiveInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArchiveInfrastructure.Migrations
{
    [DbContext(typeof(DbarchiveContext))]
    partial class DbarchiveContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArchiveDomain.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.AuthorDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DocumentId");

                    b.ToTable("AuthorDocument", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.CategoryDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CategoryDocument", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .HasColumnType("ntext");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PublicationDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.DocumentInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int>("InventoryNumber")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentInstances", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ReservationEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReservationStartDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.ReservationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentInstanceID");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.HasKey("Id");

                    b.HasIndex("DocumentInstanceId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationDocument", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordAccount")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReaderCardNumber")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ArchiveDomain.Model.AuthorDocument", b =>
                {
                    b.HasOne("ArchiveDomain.Model.Author", "Author")
                        .WithMany("AuthorDocuments")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorDocument_Authors");

                    b.HasOne("ArchiveDomain.Model.Document", "Document")
                        .WithMany("AuthorDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorDocument_Documents");

                    b.Navigation("Author");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ArchiveDomain.Model.CategoryDocument", b =>
                {
                    b.HasOne("ArchiveDomain.Model.Category", "Category")
                        .WithMany("CategoryDocuments")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryDocument_Categories");

                    b.HasOne("ArchiveDomain.Model.Document", "Document")
                        .WithMany("CategoryDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryDocument_Documents");

                    b.Navigation("Category");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ArchiveDomain.Model.Document", b =>
                {
                    b.HasOne("ArchiveDomain.Model.DocumentType", "Type")
                        .WithMany("Documents")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_DocumentTypes");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ArchiveDomain.Model.DocumentInstance", b =>
                {
                    b.HasOne("ArchiveDomain.Model.Document", "Document")
                        .WithMany("DocumentInstances")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentInstances_Documents");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ArchiveDomain.Model.Reservation", b =>
                {
                    b.HasOne("ArchiveDomain.Model.User", null)
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ArchiveDomain.Model.ReservationDocument", b =>
                {
                    b.HasOne("ArchiveDomain.Model.DocumentInstance", "DocumentInstance")
                        .WithMany("ReservationDocuments")
                        .HasForeignKey("DocumentInstanceId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationDocument_DocumentInstances");

                    b.HasOne("ArchiveDomain.Model.Reservation", "Reservation")
                        .WithMany("ReservationDocuments")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationDocument_Reservations");

                    b.Navigation("DocumentInstance");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ArchiveDomain.Model.Author", b =>
                {
                    b.Navigation("AuthorDocuments");
                });

            modelBuilder.Entity("ArchiveDomain.Model.Category", b =>
                {
                    b.Navigation("CategoryDocuments");
                });

            modelBuilder.Entity("ArchiveDomain.Model.Document", b =>
                {
                    b.Navigation("AuthorDocuments");

                    b.Navigation("CategoryDocuments");

                    b.Navigation("DocumentInstances");
                });

            modelBuilder.Entity("ArchiveDomain.Model.DocumentInstance", b =>
                {
                    b.Navigation("ReservationDocuments");
                });

            modelBuilder.Entity("ArchiveDomain.Model.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ArchiveDomain.Model.Reservation", b =>
                {
                    b.Navigation("ReservationDocuments");
                });

            modelBuilder.Entity("ArchiveDomain.Model.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
